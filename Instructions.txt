1- The app shows a list of all our aircrafts to choose from.
2- The app shows a list of all the flights the airline plan to operate that day, 
their origin, destination, departure time and arrival time.

Allow the user to view and edit the daily rotation for each aircraft
- The rotation is the list of flights, in order, an individual aircraft will operate during that day.
- Flights must be chosen by the user from our list of flights (right sidebar on the wireframe).
- The app lets the user edit the rotation freely but enforces the following rules:
  -All aircrafts must be on the ground at midnight.
  -The turnaround time (minimum time between the end of a flight and the beginning of the next one) is always 20min for our airline.
  -Aircrafts cannot "teleport" and cannot move without operating a flight, empty aircrafts cost too much!

We operate one type of aircraft.
As per aviation practice, all times are UTC (GMT), the app makes no use of local time. Airports are displayed using their four letter code.
Utilisation: The app must display for each aircraft its utilisation in percent, i.e. the time the aircraft is on scheduled service per 24 hours (as opposed to sitting idle on the apron costing us money).
Aircraft timeline: for the selected aircraft, a horizontal bar shows a period of 24 hours, scheduled service in green, turnaround time in purple, idle time in grey.


Doubts? We operate 1 type of aircraft. Our list shows total of 1? Is there only 1 aircraft?

// TO DO - functionality
Get the list of daily rotation -> flights.json
Get the percentage of IN-service of the aircraft
Get 24h in seconds --> 86400

From the aircraft get:
- In service time (flying)
- The idle time (stationary - on the base) --> The idle time is 
- turnaround time

TimeBar
airplane on the ground midnight -> 00:00 [-----6:00-----12:00-----18:00-----] 00:00 <- airplane on the ground midnight
I need to sort the list flights.json by departure



// SOLUTIONS
convert seconds to readable time -> new Date([SECONDS] * 1000).toISOString().substr(11, 8)
const fullDayInSeconds = 86400 // this is 100% of the day
const turnaroundTimeInSeconds = 1200

getTotalTurnaroundTimeInSeconds()

getTotalIdleTimeInSeconds()

// Calculate total flight time in seconds
function getTotalFlightTimeInSeconds(data){
 let total = 0;
 data.forEach((flight) => {
   total += flight.arrivaltime - flight.departuretime;
 })
 return total; // 639900
}

// Calculate if there's a collision between arrival/departure time from one flight to another
First iteration...
select a flight
read the range // 18600 to 23400
add the turnaround time to the arrival // 18600 to 23400 + 1200 <--- airplane is busy.
add flight to the rotation // 
add turnaround time // turnaroundTim.push(1200) or, for each flight, add just 1200. If array has 3 flights then, 3 * 1200 = 3600s turnaround total.
add timeInService to the array // rotation.push([23400, 18600])
convert the departure and arrival to minutes // 18600 = 310min and 23400 = 390

Thoughts...
const fullDayArray = new Array(1440)

if rotation.length > 0
read the departure and arrival // 19200s = 320min 25200 = 420min, turnaround= 20min
if array[320] through array[420+20] is empty
add it to the fullDayArray
else
alert of collision and return.

1 day has 1440 minutes.
0min [                            ] 1440min
        310  390 20

from index 320 to index 420 fill in 'service', fill the next 20 slots with turnaround

